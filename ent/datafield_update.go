// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/datafield"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/record"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DataFieldUpdate is the builder for updating DataField entities.
type DataFieldUpdate struct {
	config
	hooks    []Hook
	mutation *DataFieldMutation
}

// Where appends a list predicates to the DataFieldUpdate builder.
func (dfu *DataFieldUpdate) Where(ps ...predicate.DataField) *DataFieldUpdate {
	dfu.mutation.Where(ps...)
	return dfu
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (dfu *DataFieldUpdate) AddRecordIDs(ids ...uuid.UUID) *DataFieldUpdate {
	dfu.mutation.AddRecordIDs(ids...)
	return dfu
}

// AddRecords adds the "records" edges to the Record entity.
func (dfu *DataFieldUpdate) AddRecords(r ...*Record) *DataFieldUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dfu.AddRecordIDs(ids...)
}

// Mutation returns the DataFieldMutation object of the builder.
func (dfu *DataFieldUpdate) Mutation() *DataFieldMutation {
	return dfu.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (dfu *DataFieldUpdate) ClearRecords() *DataFieldUpdate {
	dfu.mutation.ClearRecords()
	return dfu
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (dfu *DataFieldUpdate) RemoveRecordIDs(ids ...uuid.UUID) *DataFieldUpdate {
	dfu.mutation.RemoveRecordIDs(ids...)
	return dfu
}

// RemoveRecords removes "records" edges to Record entities.
func (dfu *DataFieldUpdate) RemoveRecords(r ...*Record) *DataFieldUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dfu.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dfu *DataFieldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dfu.hooks) == 0 {
		affected, err = dfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dfu.mutation = mutation
			affected, err = dfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dfu.hooks) - 1; i >= 0; i-- {
			if dfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dfu *DataFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := dfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dfu *DataFieldUpdate) Exec(ctx context.Context) error {
	_, err := dfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfu *DataFieldUpdate) ExecX(ctx context.Context) {
	if err := dfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dfu *DataFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datafield.Table,
			Columns: datafield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datafield.FieldID,
			},
		},
	}
	if ps := dfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dfu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !dfu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datafield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DataFieldUpdateOne is the builder for updating a single DataField entity.
type DataFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataFieldMutation
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (dfuo *DataFieldUpdateOne) AddRecordIDs(ids ...uuid.UUID) *DataFieldUpdateOne {
	dfuo.mutation.AddRecordIDs(ids...)
	return dfuo
}

// AddRecords adds the "records" edges to the Record entity.
func (dfuo *DataFieldUpdateOne) AddRecords(r ...*Record) *DataFieldUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dfuo.AddRecordIDs(ids...)
}

// Mutation returns the DataFieldMutation object of the builder.
func (dfuo *DataFieldUpdateOne) Mutation() *DataFieldMutation {
	return dfuo.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (dfuo *DataFieldUpdateOne) ClearRecords() *DataFieldUpdateOne {
	dfuo.mutation.ClearRecords()
	return dfuo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (dfuo *DataFieldUpdateOne) RemoveRecordIDs(ids ...uuid.UUID) *DataFieldUpdateOne {
	dfuo.mutation.RemoveRecordIDs(ids...)
	return dfuo
}

// RemoveRecords removes "records" edges to Record entities.
func (dfuo *DataFieldUpdateOne) RemoveRecords(r ...*Record) *DataFieldUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dfuo.RemoveRecordIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dfuo *DataFieldUpdateOne) Select(field string, fields ...string) *DataFieldUpdateOne {
	dfuo.fields = append([]string{field}, fields...)
	return dfuo
}

// Save executes the query and returns the updated DataField entity.
func (dfuo *DataFieldUpdateOne) Save(ctx context.Context) (*DataField, error) {
	var (
		err  error
		node *DataField
	)
	if len(dfuo.hooks) == 0 {
		node, err = dfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dfuo.mutation = mutation
			node, err = dfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dfuo.hooks) - 1; i >= 0; i-- {
			if dfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DataField)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DataFieldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dfuo *DataFieldUpdateOne) SaveX(ctx context.Context) *DataField {
	node, err := dfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dfuo *DataFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := dfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfuo *DataFieldUpdateOne) ExecX(ctx context.Context) {
	if err := dfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dfuo *DataFieldUpdateOne) sqlSave(ctx context.Context) (_node *DataField, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datafield.Table,
			Columns: datafield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datafield.FieldID,
			},
		},
	}
	id, ok := dfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DataField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datafield.FieldID)
		for _, f := range fields {
			if !datafield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datafield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dfuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !dfuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DataField{config: dfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datafield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
