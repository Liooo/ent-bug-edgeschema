// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/bug/ent/cell"
	"entgo.io/bug/ent/datafield"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/record"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DataFieldQuery is the builder for querying DataField entities.
type DataFieldQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DataField
	// eager-loading edges.
	withRecords *RecordQuery
	withCells   *CellQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DataFieldQuery builder.
func (dfq *DataFieldQuery) Where(ps ...predicate.DataField) *DataFieldQuery {
	dfq.predicates = append(dfq.predicates, ps...)
	return dfq
}

// Limit adds a limit step to the query.
func (dfq *DataFieldQuery) Limit(limit int) *DataFieldQuery {
	dfq.limit = &limit
	return dfq
}

// Offset adds an offset step to the query.
func (dfq *DataFieldQuery) Offset(offset int) *DataFieldQuery {
	dfq.offset = &offset
	return dfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dfq *DataFieldQuery) Unique(unique bool) *DataFieldQuery {
	dfq.unique = &unique
	return dfq
}

// Order adds an order step to the query.
func (dfq *DataFieldQuery) Order(o ...OrderFunc) *DataFieldQuery {
	dfq.order = append(dfq.order, o...)
	return dfq
}

// QueryRecords chains the current query on the "records" edge.
func (dfq *DataFieldQuery) QueryRecords() *RecordQuery {
	query := &RecordQuery{config: dfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(datafield.Table, datafield.FieldID, selector),
			sqlgraph.To(record.Table, record.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, datafield.RecordsTable, datafield.RecordsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCells chains the current query on the "cells" edge.
func (dfq *DataFieldQuery) QueryCells() *CellQuery {
	query := &CellQuery{config: dfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(datafield.Table, datafield.FieldID, selector),
			sqlgraph.To(cell.Table, cell.DataFieldColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, datafield.CellsTable, datafield.CellsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DataField entity from the query.
// Returns a *NotFoundError when no DataField was found.
func (dfq *DataFieldQuery) First(ctx context.Context) (*DataField, error) {
	nodes, err := dfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{datafield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dfq *DataFieldQuery) FirstX(ctx context.Context) *DataField {
	node, err := dfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DataField ID from the query.
// Returns a *NotFoundError when no DataField ID was found.
func (dfq *DataFieldQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{datafield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dfq *DataFieldQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DataField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DataField entity is found.
// Returns a *NotFoundError when no DataField entities are found.
func (dfq *DataFieldQuery) Only(ctx context.Context) (*DataField, error) {
	nodes, err := dfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{datafield.Label}
	default:
		return nil, &NotSingularError{datafield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dfq *DataFieldQuery) OnlyX(ctx context.Context) *DataField {
	node, err := dfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DataField ID in the query.
// Returns a *NotSingularError when more than one DataField ID is found.
// Returns a *NotFoundError when no entities are found.
func (dfq *DataFieldQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{datafield.Label}
	default:
		err = &NotSingularError{datafield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dfq *DataFieldQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DataFields.
func (dfq *DataFieldQuery) All(ctx context.Context) ([]*DataField, error) {
	if err := dfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dfq *DataFieldQuery) AllX(ctx context.Context) []*DataField {
	nodes, err := dfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DataField IDs.
func (dfq *DataFieldQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := dfq.Select(datafield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dfq *DataFieldQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dfq *DataFieldQuery) Count(ctx context.Context) (int, error) {
	if err := dfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dfq *DataFieldQuery) CountX(ctx context.Context) int {
	count, err := dfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dfq *DataFieldQuery) Exist(ctx context.Context) (bool, error) {
	if err := dfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dfq *DataFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := dfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DataFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dfq *DataFieldQuery) Clone() *DataFieldQuery {
	if dfq == nil {
		return nil
	}
	return &DataFieldQuery{
		config:      dfq.config,
		limit:       dfq.limit,
		offset:      dfq.offset,
		order:       append([]OrderFunc{}, dfq.order...),
		predicates:  append([]predicate.DataField{}, dfq.predicates...),
		withRecords: dfq.withRecords.Clone(),
		withCells:   dfq.withCells.Clone(),
		// clone intermediate query.
		sql:    dfq.sql.Clone(),
		path:   dfq.path,
		unique: dfq.unique,
	}
}

// WithRecords tells the query-builder to eager-load the nodes that are connected to
// the "records" edge. The optional arguments are used to configure the query builder of the edge.
func (dfq *DataFieldQuery) WithRecords(opts ...func(*RecordQuery)) *DataFieldQuery {
	query := &RecordQuery{config: dfq.config}
	for _, opt := range opts {
		opt(query)
	}
	dfq.withRecords = query
	return dfq
}

// WithCells tells the query-builder to eager-load the nodes that are connected to
// the "cells" edge. The optional arguments are used to configure the query builder of the edge.
func (dfq *DataFieldQuery) WithCells(opts ...func(*CellQuery)) *DataFieldQuery {
	query := &CellQuery{config: dfq.config}
	for _, opt := range opts {
		opt(query)
	}
	dfq.withCells = query
	return dfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (dfq *DataFieldQuery) GroupBy(field string, fields ...string) *DataFieldGroupBy {
	grbuild := &DataFieldGroupBy{config: dfq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dfq.sqlQuery(ctx), nil
	}
	grbuild.label = datafield.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (dfq *DataFieldQuery) Select(fields ...string) *DataFieldSelect {
	dfq.fields = append(dfq.fields, fields...)
	selbuild := &DataFieldSelect{DataFieldQuery: dfq}
	selbuild.label = datafield.Label
	selbuild.flds, selbuild.scan = &dfq.fields, selbuild.Scan
	return selbuild
}

func (dfq *DataFieldQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dfq.fields {
		if !datafield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dfq.path != nil {
		prev, err := dfq.path(ctx)
		if err != nil {
			return err
		}
		dfq.sql = prev
	}
	return nil
}

func (dfq *DataFieldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DataField, error) {
	var (
		nodes       = []*DataField{}
		_spec       = dfq.querySpec()
		loadedTypes = [2]bool{
			dfq.withRecords != nil,
			dfq.withCells != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*DataField).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &DataField{config: dfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := dfq.withRecords; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[uuid.UUID]*DataField)
		nids := make(map[uuid.UUID]map[*DataField]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.Records = []*Record{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(datafield.RecordsTable)
			s.Join(joinT).On(s.C(record.FieldID), joinT.C(datafield.RecordsPrimaryKey[1]))
			s.Where(sql.InValues(joinT.C(datafield.RecordsPrimaryKey[0]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(datafield.RecordsPrimaryKey[0]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DataField]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "records" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.Records = append(kn.Edges.Records, n)
			}
		}
	}

	if query := dfq.withCells; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*DataField)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Cells = []*Cell{}
		}
		query.Where(predicate.Cell(func(s *sql.Selector) {
			s.Where(sql.InValues(datafield.CellsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.DataFieldID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "data_field_id" returned %v for node %v`, fk, n)
			}
			node.Edges.Cells = append(node.Edges.Cells, n)
		}
	}

	return nodes, nil
}

func (dfq *DataFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dfq.querySpec()
	_spec.Node.Columns = dfq.fields
	if len(dfq.fields) > 0 {
		_spec.Unique = dfq.unique != nil && *dfq.unique
	}
	return sqlgraph.CountNodes(ctx, dfq.driver, _spec)
}

func (dfq *DataFieldQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (dfq *DataFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datafield.Table,
			Columns: datafield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datafield.FieldID,
			},
		},
		From:   dfq.sql,
		Unique: true,
	}
	if unique := dfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datafield.FieldID)
		for i := range fields {
			if fields[i] != datafield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dfq *DataFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dfq.driver.Dialect())
	t1 := builder.Table(datafield.Table)
	columns := dfq.fields
	if len(columns) == 0 {
		columns = datafield.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dfq.sql != nil {
		selector = dfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dfq.unique != nil && *dfq.unique {
		selector.Distinct()
	}
	for _, p := range dfq.predicates {
		p(selector)
	}
	for _, p := range dfq.order {
		p(selector)
	}
	if offset := dfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DataFieldGroupBy is the group-by builder for DataField entities.
type DataFieldGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dfgb *DataFieldGroupBy) Aggregate(fns ...AggregateFunc) *DataFieldGroupBy {
	dfgb.fns = append(dfgb.fns, fns...)
	return dfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dfgb *DataFieldGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dfgb.path(ctx)
	if err != nil {
		return err
	}
	dfgb.sql = query
	return dfgb.sqlScan(ctx, v)
}

func (dfgb *DataFieldGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dfgb.fields {
		if !datafield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dfgb *DataFieldGroupBy) sqlQuery() *sql.Selector {
	selector := dfgb.sql.Select()
	aggregation := make([]string, 0, len(dfgb.fns))
	for _, fn := range dfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dfgb.fields)+len(dfgb.fns))
		for _, f := range dfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dfgb.fields...)...)
}

// DataFieldSelect is the builder for selecting fields of DataField entities.
type DataFieldSelect struct {
	*DataFieldQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dfs *DataFieldSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dfs.prepareQuery(ctx); err != nil {
		return err
	}
	dfs.sql = dfs.DataFieldQuery.sqlQuery(ctx)
	return dfs.sqlScan(ctx, v)
}

func (dfs *DataFieldSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dfs.sql.Query()
	if err := dfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
