// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/cell"
	"entgo.io/bug/ent/datafield"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/record"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CellUpdate is the builder for updating Cell entities.
type CellUpdate struct {
	config
	hooks    []Hook
	mutation *CellMutation
}

// Where appends a list predicates to the CellUpdate builder.
func (cu *CellUpdate) Where(ps ...predicate.Cell) *CellUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDataFieldID sets the "data_field_id" field.
func (cu *CellUpdate) SetDataFieldID(u uuid.UUID) *CellUpdate {
	cu.mutation.SetDataFieldID(u)
	return cu
}

// SetRecordID sets the "record_id" field.
func (cu *CellUpdate) SetRecordID(u uuid.UUID) *CellUpdate {
	cu.mutation.SetRecordID(u)
	return cu
}

// SetRecord sets the "record" edge to the Record entity.
func (cu *CellUpdate) SetRecord(r *Record) *CellUpdate {
	return cu.SetRecordID(r.ID)
}

// SetDataField sets the "data_field" edge to the DataField entity.
func (cu *CellUpdate) SetDataField(d *DataField) *CellUpdate {
	return cu.SetDataFieldID(d.ID)
}

// Mutation returns the CellMutation object of the builder.
func (cu *CellUpdate) Mutation() *CellMutation {
	return cu.mutation
}

// ClearRecord clears the "record" edge to the Record entity.
func (cu *CellUpdate) ClearRecord() *CellUpdate {
	cu.mutation.ClearRecord()
	return cu
}

// ClearDataField clears the "data_field" edge to the DataField entity.
func (cu *CellUpdate) ClearDataField() *CellUpdate {
	cu.mutation.ClearDataField()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CellUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CellMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CellUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CellUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CellUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CellUpdate) check() error {
	if _, ok := cu.mutation.RecordID(); cu.mutation.RecordCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cell.record"`)
	}
	if _, ok := cu.mutation.DataFieldID(); cu.mutation.DataFieldCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cell.data_field"`)
	}
	return nil
}

func (cu *CellUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cell.Table,
			Columns: cell.Columns,
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.RecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.RecordTable,
			Columns: []string{cell.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.RecordTable,
			Columns: []string{cell.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DataFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.DataFieldTable,
			Columns: []string{cell.DataFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: datafield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DataFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.DataFieldTable,
			Columns: []string{cell.DataFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: datafield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CellUpdateOne is the builder for updating a single Cell entity.
type CellUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CellMutation
}

// SetDataFieldID sets the "data_field_id" field.
func (cuo *CellUpdateOne) SetDataFieldID(u uuid.UUID) *CellUpdateOne {
	cuo.mutation.SetDataFieldID(u)
	return cuo
}

// SetRecordID sets the "record_id" field.
func (cuo *CellUpdateOne) SetRecordID(u uuid.UUID) *CellUpdateOne {
	cuo.mutation.SetRecordID(u)
	return cuo
}

// SetRecord sets the "record" edge to the Record entity.
func (cuo *CellUpdateOne) SetRecord(r *Record) *CellUpdateOne {
	return cuo.SetRecordID(r.ID)
}

// SetDataField sets the "data_field" edge to the DataField entity.
func (cuo *CellUpdateOne) SetDataField(d *DataField) *CellUpdateOne {
	return cuo.SetDataFieldID(d.ID)
}

// Mutation returns the CellMutation object of the builder.
func (cuo *CellUpdateOne) Mutation() *CellMutation {
	return cuo.mutation
}

// ClearRecord clears the "record" edge to the Record entity.
func (cuo *CellUpdateOne) ClearRecord() *CellUpdateOne {
	cuo.mutation.ClearRecord()
	return cuo
}

// ClearDataField clears the "data_field" edge to the DataField entity.
func (cuo *CellUpdateOne) ClearDataField() *CellUpdateOne {
	cuo.mutation.ClearDataField()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CellUpdateOne) Select(field string, fields ...string) *CellUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cell entity.
func (cuo *CellUpdateOne) Save(ctx context.Context) (*Cell, error) {
	var (
		err  error
		node *Cell
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CellMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Cell)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CellMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CellUpdateOne) SaveX(ctx context.Context) *Cell {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CellUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CellUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CellUpdateOne) check() error {
	if _, ok := cuo.mutation.RecordID(); cuo.mutation.RecordCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cell.record"`)
	}
	if _, ok := cuo.mutation.DataFieldID(); cuo.mutation.DataFieldCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cell.data_field"`)
	}
	return nil
}

func (cuo *CellUpdateOne) sqlSave(ctx context.Context) (_node *Cell, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cell.Table,
			Columns: cell.Columns,
		},
	}
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !cell.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.RecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.RecordTable,
			Columns: []string{cell.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.RecordTable,
			Columns: []string{cell.RecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DataFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.DataFieldTable,
			Columns: []string{cell.DataFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: datafield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DataFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cell.DataFieldTable,
			Columns: []string{cell.DataFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: datafield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cell{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cell.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
