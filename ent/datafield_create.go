// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/bug/ent/datafield"
	"entgo.io/bug/ent/record"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DataFieldCreate is the builder for creating a DataField entity.
type DataFieldCreate struct {
	config
	mutation *DataFieldMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (dfc *DataFieldCreate) SetID(u uuid.UUID) *DataFieldCreate {
	dfc.mutation.SetID(u)
	return dfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dfc *DataFieldCreate) SetNillableID(u *uuid.UUID) *DataFieldCreate {
	if u != nil {
		dfc.SetID(*u)
	}
	return dfc
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (dfc *DataFieldCreate) AddRecordIDs(ids ...uuid.UUID) *DataFieldCreate {
	dfc.mutation.AddRecordIDs(ids...)
	return dfc
}

// AddRecords adds the "records" edges to the Record entity.
func (dfc *DataFieldCreate) AddRecords(r ...*Record) *DataFieldCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dfc.AddRecordIDs(ids...)
}

// Mutation returns the DataFieldMutation object of the builder.
func (dfc *DataFieldCreate) Mutation() *DataFieldMutation {
	return dfc.mutation
}

// Save creates the DataField in the database.
func (dfc *DataFieldCreate) Save(ctx context.Context) (*DataField, error) {
	var (
		err  error
		node *DataField
	)
	dfc.defaults()
	if len(dfc.hooks) == 0 {
		if err = dfc.check(); err != nil {
			return nil, err
		}
		node, err = dfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dfc.check(); err != nil {
				return nil, err
			}
			dfc.mutation = mutation
			if node, err = dfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dfc.hooks) - 1; i >= 0; i-- {
			if dfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DataField)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DataFieldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dfc *DataFieldCreate) SaveX(ctx context.Context) *DataField {
	v, err := dfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfc *DataFieldCreate) Exec(ctx context.Context) error {
	_, err := dfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfc *DataFieldCreate) ExecX(ctx context.Context) {
	if err := dfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dfc *DataFieldCreate) defaults() {
	if _, ok := dfc.mutation.ID(); !ok {
		v := datafield.DefaultID()
		dfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dfc *DataFieldCreate) check() error {
	return nil
}

func (dfc *DataFieldCreate) sqlSave(ctx context.Context) (*DataField, error) {
	_node, _spec := dfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dfc *DataFieldCreate) createSpec() (*DataField, *sqlgraph.CreateSpec) {
	var (
		_node = &DataField{config: dfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datafield.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datafield.FieldID,
			},
		}
	)
	if id, ok := dfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := dfc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   datafield.RecordsTable,
			Columns: datafield.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DataFieldCreateBulk is the builder for creating many DataField entities in bulk.
type DataFieldCreateBulk struct {
	config
	builders []*DataFieldCreate
}

// Save creates the DataField entities in the database.
func (dfcb *DataFieldCreateBulk) Save(ctx context.Context) ([]*DataField, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dfcb.builders))
	nodes := make([]*DataField, len(dfcb.builders))
	mutators := make([]Mutator, len(dfcb.builders))
	for i := range dfcb.builders {
		func(i int, root context.Context) {
			builder := dfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dfcb *DataFieldCreateBulk) SaveX(ctx context.Context) []*DataField {
	v, err := dfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfcb *DataFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := dfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfcb *DataFieldCreateBulk) ExecX(ctx context.Context) {
	if err := dfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
