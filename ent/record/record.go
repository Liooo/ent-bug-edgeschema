// Code generated by ent, DO NOT EDIT.

package record

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDataFields holds the string denoting the data_fields edge name in mutations.
	EdgeDataFields = "data_fields"
	// EdgeCell holds the string denoting the cell edge name in mutations.
	EdgeCell = "cell"
	// Table holds the table name of the record in the database.
	Table = "records"
	// DataFieldsTable is the table that holds the data_fields relation/edge. The primary key declared below.
	DataFieldsTable = "cells"
	// DataFieldsInverseTable is the table name for the DataField entity.
	// It exists in this package in order to avoid circular dependency with the "datafield" package.
	DataFieldsInverseTable = "data_fields"
	// CellTable is the table that holds the cell relation/edge.
	CellTable = "cells"
	// CellInverseTable is the table name for the Cell entity.
	// It exists in this package in order to avoid circular dependency with the "cell" package.
	CellInverseTable = "cells"
	// CellColumn is the table column denoting the cell relation/edge.
	CellColumn = "record_id"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
}

var (
	// DataFieldsPrimaryKey and DataFieldsColumn2 are the table columns denoting the
	// primary key for the data_fields relation (M2M).
	DataFieldsPrimaryKey = []string{"data_field_id", "record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
