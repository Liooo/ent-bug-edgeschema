// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/record"
	"github.com/google/uuid"
)

// Record is the model entity for the Record schema.
type Record struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges RecordEdges `json:"edges"`
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// DataFields holds the value of the data_fields edge.
	DataFields []*DataField `json:"data_fields,omitempty"`
	// Cell holds the value of the cell edge.
	Cell []*Cell `json:"cell,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DataFieldsOrErr returns the DataFields value or an error if the edge
// was not loaded in eager-loading.
func (e RecordEdges) DataFieldsOrErr() ([]*DataField, error) {
	if e.loadedTypes[0] {
		return e.DataFields, nil
	}
	return nil, &NotLoadedError{edge: "data_fields"}
}

// CellOrErr returns the Cell value or an error if the edge
// was not loaded in eager-loading.
func (e RecordEdges) CellOrErr() ([]*Cell, error) {
	if e.loadedTypes[1] {
		return e.Cell, nil
	}
	return nil, &NotLoadedError{edge: "cell"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Record", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		}
	}
	return nil
}

// QueryDataFields queries the "data_fields" edge of the Record entity.
func (r *Record) QueryDataFields() *DataFieldQuery {
	return (&RecordClient{config: r.config}).QueryDataFields(r)
}

// QueryCell queries the "cell" edge of the Record entity.
func (r *Record) QueryCell() *CellQuery {
	return (&RecordClient{config: r.config}).QueryCell(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return (&RecordClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record

func (r Records) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
