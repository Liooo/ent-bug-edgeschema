// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/datafield"
	"github.com/google/uuid"
)

// DataField is the model entity for the DataField schema.
type DataField struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DataFieldQuery when eager-loading is set.
	Edges DataFieldEdges `json:"edges"`
}

// DataFieldEdges holds the relations/edges for other nodes in the graph.
type DataFieldEdges struct {
	// Records holds the value of the records edge.
	Records []*Record `json:"records,omitempty"`
	// Cells holds the value of the cells edge.
	Cells []*Cell `json:"cells,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e DataFieldEdges) RecordsOrErr() ([]*Record, error) {
	if e.loadedTypes[0] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// CellsOrErr returns the Cells value or an error if the edge
// was not loaded in eager-loading.
func (e DataFieldEdges) CellsOrErr() ([]*Cell, error) {
	if e.loadedTypes[1] {
		return e.Cells, nil
	}
	return nil, &NotLoadedError{edge: "cells"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DataField) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case datafield.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DataField", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DataField fields.
func (df *DataField) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case datafield.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				df.ID = *value
			}
		}
	}
	return nil
}

// QueryRecords queries the "records" edge of the DataField entity.
func (df *DataField) QueryRecords() *RecordQuery {
	return (&DataFieldClient{config: df.config}).QueryRecords(df)
}

// QueryCells queries the "cells" edge of the DataField entity.
func (df *DataField) QueryCells() *CellQuery {
	return (&DataFieldClient{config: df.config}).QueryCells(df)
}

// Update returns a builder for updating this DataField.
// Note that you need to call DataField.Unwrap() before calling this method if this DataField
// was returned from a transaction, and the transaction was committed or rolled back.
func (df *DataField) Update() *DataFieldUpdateOne {
	return (&DataFieldClient{config: df.config}).UpdateOne(df)
}

// Unwrap unwraps the DataField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (df *DataField) Unwrap() *DataField {
	_tx, ok := df.config.driver.(*txDriver)
	if !ok {
		panic("ent: DataField is not a transactional entity")
	}
	df.config.driver = _tx.drv
	return df
}

// String implements the fmt.Stringer.
func (df *DataField) String() string {
	var builder strings.Builder
	builder.WriteString("DataField(")
	builder.WriteString(fmt.Sprintf("id=%v", df.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DataFields is a parsable slice of DataField.
type DataFields []*DataField

func (df DataFields) config(cfg config) {
	for _i := range df {
		df[_i].config = cfg
	}
}
