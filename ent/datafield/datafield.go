// Code generated by ent, DO NOT EDIT.

package datafield

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the datafield type in the database.
	Label = "data_field"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// EdgeCells holds the string denoting the cells edge name in mutations.
	EdgeCells = "cells"
	// Table holds the table name of the datafield in the database.
	Table = "data_fields"
	// RecordsTable is the table that holds the records relation/edge. The primary key declared below.
	RecordsTable = "cells"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// CellsTable is the table that holds the cells relation/edge.
	CellsTable = "cells"
	// CellsInverseTable is the table name for the Cell entity.
	// It exists in this package in order to avoid circular dependency with the "cell" package.
	CellsInverseTable = "cells"
	// CellsColumn is the table column denoting the cells relation/edge.
	CellsColumn = "data_field_id"
)

// Columns holds all SQL columns for datafield fields.
var Columns = []string{
	FieldID,
}

var (
	// RecordsPrimaryKey and RecordsColumn2 are the table columns denoting the
	// primary key for the records relation (M2M).
	RecordsPrimaryKey = []string{"data_field_id", "record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
