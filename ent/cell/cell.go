// Code generated by ent, DO NOT EDIT.

package cell

const (
	// Label holds the string label denoting the cell type in the database.
	Label = "cell"
	// FieldDataFieldID holds the string denoting the data_field_id field in the database.
	FieldDataFieldID = "data_field_id"
	// FieldRecordID holds the string denoting the record_id field in the database.
	FieldRecordID = "record_id"
	// EdgeRecord holds the string denoting the record edge name in mutations.
	EdgeRecord = "record"
	// EdgeDataField holds the string denoting the data_field edge name in mutations.
	EdgeDataField = "data_field"
	// RecordFieldID holds the string denoting the ID field of the Record.
	RecordFieldID = "id"
	// DataFieldFieldID holds the string denoting the ID field of the DataField.
	DataFieldFieldID = "id"
	// Table holds the table name of the cell in the database.
	Table = "cells"
	// RecordTable is the table that holds the record relation/edge.
	RecordTable = "cells"
	// RecordInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordInverseTable = "records"
	// RecordColumn is the table column denoting the record relation/edge.
	RecordColumn = "record_id"
	// DataFieldTable is the table that holds the data_field relation/edge.
	DataFieldTable = "cells"
	// DataFieldInverseTable is the table name for the DataField entity.
	// It exists in this package in order to avoid circular dependency with the "datafield" package.
	DataFieldInverseTable = "data_fields"
	// DataFieldColumn is the table column denoting the data_field relation/edge.
	DataFieldColumn = "data_field_id"
)

// Columns holds all SQL columns for cell fields.
var Columns = []string{
	FieldDataFieldID,
	FieldRecordID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
