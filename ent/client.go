// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/bug/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/bug/ent/cell"
	"entgo.io/bug/ent/datafield"
	"entgo.io/bug/ent/record"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cell is the client for interacting with the Cell builders.
	Cell *CellClient
	// DataField is the client for interacting with the DataField builders.
	DataField *DataFieldClient
	// Record is the client for interacting with the Record builders.
	Record *RecordClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cell = NewCellClient(c.config)
	c.DataField = NewDataFieldClient(c.config)
	c.Record = NewRecordClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Cell:      NewCellClient(cfg),
		DataField: NewDataFieldClient(cfg),
		Record:    NewRecordClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Cell:      NewCellClient(cfg),
		DataField: NewDataFieldClient(cfg),
		Record:    NewRecordClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cell.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cell.Use(hooks...)
	c.DataField.Use(hooks...)
	c.Record.Use(hooks...)
}

// CellClient is a client for the Cell schema.
type CellClient struct {
	config
}

// NewCellClient returns a client for the Cell from the given config.
func NewCellClient(c config) *CellClient {
	return &CellClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cell.Hooks(f(g(h())))`.
func (c *CellClient) Use(hooks ...Hook) {
	c.hooks.Cell = append(c.hooks.Cell, hooks...)
}

// Create returns a builder for creating a Cell entity.
func (c *CellClient) Create() *CellCreate {
	mutation := newCellMutation(c.config, OpCreate)
	return &CellCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cell entities.
func (c *CellClient) CreateBulk(builders ...*CellCreate) *CellCreateBulk {
	return &CellCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cell.
func (c *CellClient) Update() *CellUpdate {
	mutation := newCellMutation(c.config, OpUpdate)
	return &CellUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CellClient) UpdateOne(ce *Cell) *CellUpdateOne {
	mutation := newCellMutation(c.config, OpUpdateOne)
	mutation.Where(cell.DataFieldID(ce.DataFieldID), cell.RecordID(ce.RecordID))
	return &CellUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cell.
func (c *CellClient) Delete() *CellDelete {
	mutation := newCellMutation(c.config, OpDelete)
	return &CellDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for Cell.
func (c *CellClient) Query() *CellQuery {
	return &CellQuery{
		config: c.config,
	}
}

// QueryRecord queries the record edge of a Cell.
func (c *CellClient) QueryRecord(ce *Cell) *RecordQuery {
	return c.Query().
		Where(cell.DataFieldID(ce.DataFieldID), cell.RecordID(ce.RecordID)).
		QueryRecord()
}

// QueryDataField queries the data_field edge of a Cell.
func (c *CellClient) QueryDataField(ce *Cell) *DataFieldQuery {
	return c.Query().
		Where(cell.DataFieldID(ce.DataFieldID), cell.RecordID(ce.RecordID)).
		QueryDataField()
}

// Hooks returns the client hooks.
func (c *CellClient) Hooks() []Hook {
	return c.hooks.Cell
}

// DataFieldClient is a client for the DataField schema.
type DataFieldClient struct {
	config
}

// NewDataFieldClient returns a client for the DataField from the given config.
func NewDataFieldClient(c config) *DataFieldClient {
	return &DataFieldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datafield.Hooks(f(g(h())))`.
func (c *DataFieldClient) Use(hooks ...Hook) {
	c.hooks.DataField = append(c.hooks.DataField, hooks...)
}

// Create returns a builder for creating a DataField entity.
func (c *DataFieldClient) Create() *DataFieldCreate {
	mutation := newDataFieldMutation(c.config, OpCreate)
	return &DataFieldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataField entities.
func (c *DataFieldClient) CreateBulk(builders ...*DataFieldCreate) *DataFieldCreateBulk {
	return &DataFieldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataField.
func (c *DataFieldClient) Update() *DataFieldUpdate {
	mutation := newDataFieldMutation(c.config, OpUpdate)
	return &DataFieldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataFieldClient) UpdateOne(df *DataField) *DataFieldUpdateOne {
	mutation := newDataFieldMutation(c.config, OpUpdateOne, withDataField(df))
	return &DataFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataFieldClient) UpdateOneID(id uuid.UUID) *DataFieldUpdateOne {
	mutation := newDataFieldMutation(c.config, OpUpdateOne, withDataFieldID(id))
	return &DataFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataField.
func (c *DataFieldClient) Delete() *DataFieldDelete {
	mutation := newDataFieldMutation(c.config, OpDelete)
	return &DataFieldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DataFieldClient) DeleteOne(df *DataField) *DataFieldDeleteOne {
	return c.DeleteOneID(df.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DataFieldClient) DeleteOneID(id uuid.UUID) *DataFieldDeleteOne {
	builder := c.Delete().Where(datafield.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataFieldDeleteOne{builder}
}

// Query returns a query builder for DataField.
func (c *DataFieldClient) Query() *DataFieldQuery {
	return &DataFieldQuery{
		config: c.config,
	}
}

// Get returns a DataField entity by its id.
func (c *DataFieldClient) Get(ctx context.Context, id uuid.UUID) (*DataField, error) {
	return c.Query().Where(datafield.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataFieldClient) GetX(ctx context.Context, id uuid.UUID) *DataField {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecords queries the records edge of a DataField.
func (c *DataFieldClient) QueryRecords(df *DataField) *RecordQuery {
	query := &RecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(datafield.Table, datafield.FieldID, id),
			sqlgraph.To(record.Table, record.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, datafield.RecordsTable, datafield.RecordsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCells queries the cells edge of a DataField.
func (c *DataFieldClient) QueryCells(df *DataField) *CellQuery {
	query := &CellQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(datafield.Table, datafield.FieldID, id),
			sqlgraph.To(cell.Table, cell.DataFieldColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, datafield.CellsTable, datafield.CellsColumn),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DataFieldClient) Hooks() []Hook {
	return c.hooks.DataField
}

// RecordClient is a client for the Record schema.
type RecordClient struct {
	config
}

// NewRecordClient returns a client for the Record from the given config.
func NewRecordClient(c config) *RecordClient {
	return &RecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `record.Hooks(f(g(h())))`.
func (c *RecordClient) Use(hooks ...Hook) {
	c.hooks.Record = append(c.hooks.Record, hooks...)
}

// Create returns a builder for creating a Record entity.
func (c *RecordClient) Create() *RecordCreate {
	mutation := newRecordMutation(c.config, OpCreate)
	return &RecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Record entities.
func (c *RecordClient) CreateBulk(builders ...*RecordCreate) *RecordCreateBulk {
	return &RecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Record.
func (c *RecordClient) Update() *RecordUpdate {
	mutation := newRecordMutation(c.config, OpUpdate)
	return &RecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecordClient) UpdateOne(r *Record) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecord(r))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecordClient) UpdateOneID(id uuid.UUID) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecordID(id))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Record.
func (c *RecordClient) Delete() *RecordDelete {
	mutation := newRecordMutation(c.config, OpDelete)
	return &RecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecordClient) DeleteOne(r *Record) *RecordDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RecordClient) DeleteOneID(id uuid.UUID) *RecordDeleteOne {
	builder := c.Delete().Where(record.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecordDeleteOne{builder}
}

// Query returns a query builder for Record.
func (c *RecordClient) Query() *RecordQuery {
	return &RecordQuery{
		config: c.config,
	}
}

// Get returns a Record entity by its id.
func (c *RecordClient) Get(ctx context.Context, id uuid.UUID) (*Record, error) {
	return c.Query().Where(record.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecordClient) GetX(ctx context.Context, id uuid.UUID) *Record {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDataFields queries the data_fields edge of a Record.
func (c *RecordClient) QueryDataFields(r *Record) *DataFieldQuery {
	query := &DataFieldQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(record.Table, record.FieldID, id),
			sqlgraph.To(datafield.Table, datafield.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, record.DataFieldsTable, record.DataFieldsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCell queries the cell edge of a Record.
func (c *RecordClient) QueryCell(r *Record) *CellQuery {
	query := &CellQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(record.Table, record.FieldID, id),
			sqlgraph.To(cell.Table, cell.RecordColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, record.CellTable, record.CellColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecordClient) Hooks() []Hook {
	return c.hooks.Record
}
